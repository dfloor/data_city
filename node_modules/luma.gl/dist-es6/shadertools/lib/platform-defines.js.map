{"version":3,"sources":["../../../src/shadertools/lib/platform-defines.js"],"names":["getContextInfo","checkRendererVendor","debugInfo","gpuVendor","vendor","renderer","result","match","getPlatformShaderDefines","gl","platformDefines","VERSION_DEFINES"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,aAA7B;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwCC,SAAxC,EAAmD;AAAA,MACjDC,MADiD,GAC7BF,SAD6B,CACjDE,MADiD;AAAA,MACzCC,QADyC,GAC7BH,SAD6B,CACzCG,QADyC;;AAExD,MAAIC,eAAJ;AACA,UAAQH,SAAR;AACA,SAAK,QAAL;AACEG,eAASF,OAAOG,KAAP,CAAa,SAAb,KAA2BF,SAASE,KAAT,CAAe,SAAf,CAApC;AACA;AACF,SAAK,OAAL;AACED,eAASF,OAAOG,KAAP,CAAa,QAAb,KAA0BF,SAASE,KAAT,CAAe,QAAf,CAAnC;AACA;AACF,SAAK,KAAL;AACED,eACEF,OAAOG,KAAP,CAAa,MAAb,KAAwBF,SAASE,KAAT,CAAe,MAAf,CAAxB,IACAH,OAAOG,KAAP,CAAa,MAAb,CADA,IACwBF,SAASE,KAAT,CAAe,MAAf,CAF1B;AAGA;AACF;AACED,eAAS,KAAT;AAbF;AAeA,SAAOA,MAAP;AACD;;AAED,OAAO,SAASE,wBAAT,CAAkCC,EAAlC,EAAsC;AAC3C;AACA,MAAIC,kBAAkB,EAAtB;AACA,MAAMR,YAAYF,eAAeS,EAAf,CAAlB;;AAEA,MAAIR,oBAAoBC,SAApB,EAA+B,QAA/B,CAAJ,EAA8C;AAC5CQ;AAKD,GAND,MAMO,IAAIT,oBAAoBC,SAApB,EAA+B,OAA/B,CAAJ,EAA6C;AAClDQ;AAMD,GAPM,MAOA,IAAIT,oBAAoBC,SAApB,EAA+B,KAA/B,CAAJ,EAA2C;AAChDQ;AAGD,GAJM,MAIA;AACLA;AAGD;;AAED,SAAOA,eAAP;AACD;;AAED,OAAO,IAAMC,+5CAAN","file":"platform-defines.js","sourcesContent":["import {getContextInfo} from '../../webgl';\n\nexport function checkRendererVendor(debugInfo, gpuVendor) {\n  const {vendor, renderer} = debugInfo;\n  let result;\n  switch (gpuVendor) {\n  case 'nvidia':\n    result = vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i);\n    break;\n  case 'intel':\n    result = vendor.match(/INTEL/i) || renderer.match(/INTEL/i);\n    break;\n  case 'amd':\n    result =\n      vendor.match(/AMD/i) || renderer.match(/AMD/i) ||\n      vendor.match(/ATI/i) || renderer.match(/ATI/i);\n    break;\n  default:\n    result = false;\n  }\n  return result;\n}\n\nexport function getPlatformShaderDefines(gl) {\n  /* eslint-disable */\n  let platformDefines = '';\n  const debugInfo = getContextInfo(gl);\n\n  if (checkRendererVendor(debugInfo, 'nvidia')) {\n    platformDefines += `\\\n#define NVIDIA_GPU\n#define NVIDIA_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\n`;\n  } else if (checkRendererVendor(debugInfo, 'intel')) {\n    platformDefines += `\\\n#define INTEL_GPU\n#define INTEL_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\\n \\\n#define INTEL_TAN_WORKAROUND 1\n`;\n  } else if (checkRendererVendor(debugInfo, 'amd')) {\n    platformDefines += `\\\n#define AMD_GPU\n`;\n  } else {\n    platformDefines += `\\\n#define DEFAULT_GPU\n`;\n  }\n\n  return platformDefines;\n}\n\nexport const VERSION_DEFINES = `\\\n// Defines for shader portability\n#if (__VERSION__ > 120)\n# define attribute in\n# define varying out\n#else\n// # define in attribute\n// # define out varying\n#endif // __VERSION\n\n// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n#if (__VERSION__ > 120)\n# define FRAG_DEPTH\n#endif\n\n// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n#if (__VERSION__ > 120)\n# define DERIVATIVES\n#endif\n\n// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n#if (__VERSION__ > 120)\n# define DRAW_BUFFERS\n#endif\n\n// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n#if (__VERSION__ > 120)\n# define TEXTURE_LOD\n#endif\n`;\n"]}